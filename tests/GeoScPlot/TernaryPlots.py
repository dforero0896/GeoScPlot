#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import matplotlib.pyplot as plt
import ternary

def buildProvenancePlot():
    #(Lithics, Qtz, Fs)
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("Tectonic Provenance", fontsize=20)
    tax.boundary(linewidth=2.0 )
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("Feldespar", fontsize=18)
    tax.right_axis_label("Quartz", fontsize=18)
    tax.bottom_axis_label("Lithics", fontsize=18)
    p1 = (75,25,0)
    p2 = (0, 100-45, 45)
    tax.line(p1, p2, linewidth=3., color='k', linestyle="-")
    q1 = (3,97,0)
    q2 = (15, 0, 100-15)
    tax.line(q1, q2, linewidth=3., color='k', linestyle="-")
    tax.line((0, 100-18), (5, 80), linewidth=3., color='k', linestyle="-")
    tax.line((75,25, 0), (50, 0), linewidth=3., color='k', linestyle="-")
    tax.line((13,18), (54, 33.5), linewidth=3., color='k', linestyle="-")
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().text(21, 80, 'Craton Interior',fontsize=15, color='k')
    figure.gca().text(15, 60, 'Transitional\nContinental',fontsize=15, color='k')
    figure.gca().text(-5, 20, 'Basement\nUplift',fontsize=15, color='k')
    figure.gca().text(50, 50, 'Recycled\nOrogenic',fontsize=15, color='k')
    figure.gca().text(35, 25, 'Dissected\nArc',fontsize=15, color='k')
    figure.gca().text(40, 10, 'Transitional\nArc',fontsize=15, color='k')
    figure.gca().text(70, 2, 'Undissected\nArc',fontsize=15, color='k')
    figure.gca().axis('off')
    return figure, tax
def buildSSTClassification():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("Sandstone Classification", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("Feldespar", fontsize=15)
    tax.right_axis_label("Quartz", fontsize=15)
    tax.bottom_axis_label("Lithics", fontsize=15)
    p1 = (5,90,5)
    p1_1 = (25./4,75,3*25./4)
    p1_2 = (3*25./4,75,25./4)
    p2 = (75, 0, 25)
    p3 = (50, 0, 50)
    p4 = (25, 0, 75)
    tax.line(p1_2, p2, linewidth=3.,  color='k', linestyle="-")
    tax.line(p1, p3, linewidth=3.,  color='k', linestyle="-")
    tax.line(p1_1, p4, linewidth=3.,  color='k', linestyle="-")
    q1=(0,75,25)
    q2=(25,75,0)
    q3=(10, 90, 0)
    q4=(0, 90, 10)
    tax.line(q1, q2, linewidth=3.,  color='k', linestyle="-")
    tax.line(q3, q4, linewidth=3.,  color='k', linestyle="-")
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().text(20, 30, 'Arkose', fontsize=15, rotation=70)
    figure.gca().text(40, 30, 'Lithic arkose', fontsize=15, rotation=85)
    figure.gca().text(55, 40, 'Feldespatic litharenite', fontsize=15, rotation=-85)
    figure.gca().text(70, 30, 'Litharenite', fontsize=15, rotation=-70)
    figure.gca().text(20, 70, 'Subarkose', fontsize=15, rotation=0)
    figure.gca().text(64, 70, 'Sublitharenite', fontsize=15, rotation=0)
    figure.gca().text(57, 82, 'Quartzarenite', fontsize=15, rotation=0)
    figure.gca().axis('off')
    return figure, tax
def buildPettijohnSST():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("Pettijohn", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("Feldespar", fontsize=15)
    tax.right_axis_label("Quartz", fontsize=15)
    tax.bottom_axis_label("Lithics", fontsize=15)
    p1 = (5,90,5)
    p1_1 = (5, 95,0)
    p1_2 = (0,95,5)
    p2 = (75, 0, 25)
    p3 = (50, 0, 50)
    p4 = (25, 0, 75)
    tax.line(p1_2, p1, linewidth=3., color='k', linestyle="-")
    tax.line(p1, p3, linewidth=3., color='k', linestyle="-")
    tax.line(p1_1, p1, linewidth=3., color='k', linestyle="-")
    tax.line((0, 75), (25, 50), linewidth=3., color='k', linestyle="-")
    tax.line((25, 50), (25, 75), linewidth=3., color='k', linestyle="-")
    figure.gca().text(24, 75, 'Subarkose', fontsize=15, rotation=0)
    figure.gca().text(61, 75, 'Sublitharenite', fontsize=15, rotation=0)
    figure.gca().text(55, 85, 'Quartzarenite', fontsize=15, rotation=0)
    figure.gca().text(25, 20, 'Arkosic\narenite', fontsize=15, rotation=0)
    figure.gca().text(65, 20, 'Lithic\narenite', fontsize=15, rotation=0)
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().axis('off')
    return figure, tax


def buildPettijohnWacke():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("Pettijohn", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("Feldespar", fontsize=15)
    tax.right_axis_label("Quartz", fontsize=15)
    tax.bottom_axis_label("Lithics", fontsize=15)
    p1 = (5,90,5)
    p1_1 = (5, 95,0)
    p1_2 = (0,95,5)
    p2 = (75, 0, 25)
    p3 = (50, 0, 50)
    p4 = (25, 0, 75)
    tax.line(p1_2, p1, linewidth=3., color='k', linestyle="-")
    tax.line(p1, p3, linewidth=3., color='k', linestyle="-")
    tax.line(p1_1, p1, linewidth=3., color='k', linestyle="-")
    tax.line((0, 75), (25, 50), linewidth=3., color='k', linestyle="-")
    tax.line((25, 50), (25, 75), linewidth=3., color='k', linestyle="-")
    figure.gca().text(24, 75, 'Subarkose', fontsize=15, rotation=0)
    figure.gca().text(61, 75, 'Sublitharenite', fontsize=15, rotation=0)
    figure.gca().text(55, 85, 'Quartzarenite', fontsize=15, rotation=0)
    figure.gca().text(25, 20, 'Arkosic\narenite', fontsize=15, rotation=0)
    figure.gca().text(65, 20, 'Lithic\narenite', fontsize=15, rotation=0)
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().axis('off')
    return figure, tax
def buildCong():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("Gravel and Conglomerates", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("Mud", fontsize=15)
    tax.right_axis_label("Gravel", fontsize=15)
    tax.bottom_axis_label("Sand", fontsize=15)
    tax.horizontal_line(80, c='k', lw=3)
    tax.horizontal_line(30, c='k', lw=3)
    tax.horizontal_line(5, c='k', lw=3)
    tax.line((50, 0), (10, 80), linewidth=3., color='k', linestyle="-")
    tax.line((90, 0), (18, 80), linewidth=3., color='k', linestyle="-")
    tax.line((5, 5), (5, 0), linewidth=3., color='k', linestyle="-")
    figure.gca().text(-1, -5, 'Mud-', fontsize=15, rotation=0)
    figure.gca().text(20, 1, 'Sandy mud-', fontsize=15, rotation=0)
    figure.gca().text(60, 1, 'Muddy sand-', fontsize=15, rotation=0)
    figure.gca().text(91, -5, 'Sand-', fontsize=15, rotation=0)
    figure.gca().text(30, 10, 'Gravelly\nmud-', fontsize=15, rotation=0)
    figure.gca().text(60, 10, 'Gravelly\nmuddy sand-', fontsize=15, rotation=0)
    figure.gca().text(30, 42, 'Muddy\ngravel/cong', fontsize=15, rotation=0)
    figure.gca().text(51, 40, 'Muddy\nsandy\ngravel/cong.', fontsize=15, rotation=0)
    figure.gca().text(61, 75, 'Gravel/Cong', fontsize=15, rotation=0)
    figure.gca().text(73, 55, 'Sandy\ngravel/cong', fontsize=15, rotation=0)
    figure.gca().text(94, 15, 'Gravelly\nsand-', fontsize=15, rotation=0)
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().axis('off')
    return figure, tax

def buildQAP():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("QAP", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("A", fontsize=15)
    tax.right_axis_label("Q", fontsize=15)
    tax.bottom_axis_label("P", fontsize=15)
    tax.horizontal_line(90, c='k', lw=3)
    tax.horizontal_line(60, c='k', lw=3)
    tax.horizontal_line(20, c='k', lw=3)
    tax.horizontal_line(5, c='k', lw=3)
    tax.line((90, 0), (35, 60), linewidth=3., color='k', linestyle="-")
    tax.line((10, 0), (5, 60), linewidth=3., color='k', linestyle="-")
    tax.line((35, 0), (15, 60), linewidth=3., color='k', linestyle="-")
    tax.line((65, 0), (25, 60), linewidth=3., color='k', linestyle="-")
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().axis('off')
    return figure, tax

def buildAPF():
    scale = 100
    figure, tax = ternary.figure(scale=scale)
    figure.set_size_inches(10, 10)
    tax.set_title("APF", fontsize=20)
    tax.boundary(linewidth=2.0)
    tax.gridlines(multiple=5, color="black")
    tax.left_axis_label("A", fontsize=15)
    tax.right_axis_label("F", fontsize=15)
    tax.bottom_axis_label("P", fontsize=15)
    tax.horizontal_line(60, c='k', lw=3)
    tax.horizontal_line(10, c='k', lw=3)
    tax.line((90, 0), (35, 60), linewidth=3., color='k', linestyle="-")
    tax.line((10, 0), (5, 60), linewidth=3., color='k', linestyle="-")
    tax.line((45, 10), (20, 60), linewidth=3., color='k', linestyle="-")
    tax.line((35, 0), (31.75, 10), linewidth=3., color='k', linestyle="-")
    tax.line((65, 0), (58.4, 10), linewidth=3., color='k', linestyle="-")
    tax.ticks(axis='lbr', linewidth=1, multiple=5)
    tax.clear_matplotlib_ticks()
    figure.gca().axis('off')
    return figure, tax
